using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LibGit2Sharp
{
    /// <summary>
    /// Information about a rebase step that was just completed.
    /// </summary>
    public class AfterRebaseStepInfo
    {
        /// <summary>
        /// Needed for mocking.
        /// </summary>
        protected AfterRebaseStepInfo()
        { }

        internal AfterRebaseStepInfo(RebaseStepInfo stepInfo, ObjectId commitId)
        {
            StepInfo = stepInfo;
            CommitId = commitId;
            WasPatchAlreadyApplied = false;
        }

        /// <summary>
        /// Constructor to call when the patch has already been applied for this step.
        /// </summary>
        /// <param name="stepInfo"></param>
        internal AfterRebaseStepInfo(RebaseStepInfo stepInfo)
            : this (stepInfo, null)
        {
            WasPatchAlreadyApplied = true;
        }

        /// <summary>
        /// The info on the completed step.
        /// </summary>
        public virtual RebaseStepInfo StepInfo { get; private set; }

        /// <summary>
        /// The ID of the commit generated by the step, if any.
        /// </summary>
        public virtual ObjectId CommitId { get; private set; }

        /// <summary>
        /// Was the changes for this step already applied. If so,
        /// <see cref="AfterRebaseStepInfo.CommitId"/> will be null.
        /// </summary>
        public virtual bool WasPatchAlreadyApplied { get; private set; }
    }
}
